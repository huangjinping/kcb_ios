//
//  ServiceSettingController.m
//  Merchant
//
//  Created by Wendy on 15/12/18.
//  Copyright © 2015年 tranPlat. All rights reserved.
//

#import "ServiceSettingController.h"
#import "ServiceSettingCell.h"
#import "MESettingList.h"
#import <MJExtension.h>
#import <MJRefresh.h>

@interface ServiceSettingController ()<UITableViewDelegate,UITableViewDataSource>{
    NSMutableArray *settingArray;
}

@property (nonatomic,strong)UITableView *tableView;
@end

@implementation ServiceSettingController

- (void)viewDidLoad {
    [super viewDidLoad];
    self.tableView = [[UITableView alloc] initWithFrame:CGRectMake(0, 0, self.view.width, self.view.height - APP_TAB_HEIGHT- APP_NAV_HEIGHT) style:UITableViewStyleGrouped];
    self.tableView.delegate = self;
    self.tableView.dataSource = self;
    [self.tableView registerClass:[ServiceSettingCell class] forCellReuseIdentifier:@"ServiceSettingCell"];
    [self.view addSubview:self.tableView];
    [self setNavTitle:@"服务设置"];
    self.navigationItem.leftBarButtonItem = nil;
    
    UIButton *btn  = [UIButton buttonWithType:UIButtonTypeCustom];
    btn.frame = CGRectMake(0, 0, 55, 25);
    [btn addBorderWithWidth:1 color:RGB(140, 198, 142) corner:1];
    [btn setTitle:@"完成" forState:UIControlStateNormal];
    btn.titleLabel.font = V3_36PX_FONT;
    [btn setTitleColor:[UIColor whiteColor]];
    [btn addTarget:self action:@selector(editServiceSetting)];
    
    UIBarButtonItem *right= [[UIBarButtonItem alloc] initWithCustomView:btn];
    self.navigationItem.rightBarButtonItem = right;
    
    [self requestServiceSetting];
    
    self.tableView.mj_header = [MJRefreshNormalHeader headerWithRefreshingTarget:self refreshingAction:@selector(requestServiceSetting)];
    
    // Do any additional setup after loading the view.
}
- (void)requestServiceSetting{
    NSInteger merid = ApplicationDelegate.shareLoginData.userdata.mid;
    NSDictionary *param = @{@"merid":[NSNumber numberWithInteger:merid].stringValue};
    [AFNHttpRequest afnHttpRequestUrl:kHttpSettingList param:param success:^(id responseObject){
        [self.tableView.mj_header endRefreshing];
        if (kRspCode(responseObject) == 0) {
            NSArray *settingList = responseObject[@"body"][@"settingList"];
            settingArray = [MESettingList mj_objectArrayWithKeyValuesArray:settingList];
            [self dealSectionStatus];
            [self.tableView reloadData];
        }
    } failure:^(NSError *error) {
        [self.tableView.mj_header endRefreshing];
    }];
}
- (void)dealSectionStatus{
    for (MESettingList *item in settingArray) {
        item.on = YES;
        for (Lm *lm in item.lm) {
            if (lm.mid.length == 0) {
                item.on = NO;
                lm.type = @"close";
            }else{
                lm.type = @"open";
            }
        }
    }
}
- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}



-(void)showAalert:(NSString *)msg{
    NSString *alert=[NSString stringWithFormat:@"请输入%@工时费",msg];
    [UIHelper showText:alert ToView:self.view];
}



- (void)editServiceSetting
{
    
    /*
     "mid": "56",主键    类型String
     "type":"close",  操作类型 close为关闭,open为打开  类型String
     "price": "123.00",服务价格  类型String
     "sid": 4 服务ID 类型Long
     
     
     "merid": "",
     "mid": "",
     "name": "更换雨刷",
     "price": "",
     "sid": 5
     */
    
    NSMutableArray *array = [[NSMutableArray alloc] initWithCapacity:0];
    for (MESettingList *item in settingArray) {
        for (Lm *lm in item.lm) {
            if (lm) {
                [array addObject:lm];
                if ([lm.type isEqualToString:@"open"]&&(lm.price==nil||lm.price.length==0)) {
                    [self showAalert:lm.name];
                    return;
                }
                
            }
        }
    }
    if (array.count == 0) {
        return;
    }
    
    
    
    
    NSInteger merid = ApplicationDelegate.shareLoginData.userdata.mid;
    NSDictionary *param = @{@"merid":[NSNumber numberWithInteger:merid].stringValue,@"settingList":[Lm mj_keyValuesArrayWithObjectArray:array ]};
    [AFNHttpRequest afnHttpRequestUrl:kHttpSetting param:param success:^(id responseObject) {
        
    } failure:^(NSError *error) {
        
    }];
}
/*
#pragma mark - Navigation

// In a storyboard-based application, you will often want to do a little preparation before navigation
- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
    // Get the new view controller using [segue destinationViewController].
    // Pass the selected object to the new view controller.
}
*/
- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section{
    return 70;
}
- (UIView *)tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section{
    MESettingList *item = settingArray[section];
    UIView *view = [[UIView alloc] initWithFrame:CGRectMake(0, 0, APP_WIDTH, 70)];
    view.backgroundColor = [UIColor whiteColor];
    UILabel *titleLab = [[UILabel alloc] initWithFrame:CGRectMake(10, 0, 100, 70)];
    titleLab.text = item.name;
    titleLab.textColor = RGB(76, 76, 76);
    titleLab.font = V3_42PX_FONT;
    [view addSubview:titleLab];

    UISwitch *switchControl = [[UISwitch alloc] init];
    switchControl.left = view.width - 80;
    switchControl.on = item.on;
    switchControl.centerY = view.centerY;
    switchControl.tag = section;
    [switchControl addTarget:self action:@selector(sectionSwitchValueChanged:) forControlEvents:UIControlEventValueChanged];
    [view addSubview:switchControl];
    [view addLineWithFrame:CGRectMake(0, 69, APP_WIDTH, 1) lineColor:kLineColor];
    return view;
}
- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath{
//    MESettingList *item = settingArray[indexPath.section];
//    Lm * info = item.lm[indexPath.row];
    if ([self currentStatusByIndexPath:indexPath]) {
        return 100;
    }
    return 50;
//    return [tableView fd_heightForCellWithIdentifier:@"ServiceSettingCell" configuration:^(id cell) {
//        ServiceSettingCell *sCell = (ServiceSettingCell *)cell;
//        MESettingList *item = settingArray[indexPath.section];
//        
//        Lm * info = item.lm[indexPath.row];
//        sCell.titleLab.text = info.name;
//        sCell.switchCtrl.on = info.merid.length ? YES:NO;
//        sCell.manHourTF.text = info.price;
//        [scell.switchCtrl addTarget:self action:@selector(switchValueChanged:) forControlEvents:UIControlEventValueChanged];
//    }];

}
- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView{
    return settingArray.count;
}
- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    MESettingList *item = settingArray[section];
    return item.lm.count;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    static NSString *identifier = @"ServiceSettingCell";
    ServiceSettingCell *cell = [tableView dequeueReusableCellWithIdentifier:identifier];
    
    if (cell == nil) {
        cell = [[ServiceSettingCell alloc] init];
        cell.selectionStyle = UITableViewCellSelectionStyleNone;
    }
    MESettingList *item = settingArray[indexPath.section];

    Lm * info = item.lm[indexPath.row];
    cell.titleLab.text = info.name;
    cell.switchCtrl.on = [self currentStatusByIndexPath:indexPath];
    cell.manHourTF.text = info.price;
    cell.manHourTF.tag = [self getTagByIndexPath:indexPath];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(textFieldDidChange:) name:UITextFieldTextDidChangeNotification object:cell.manHourTF];
    cell.switchCtrl.tag = [self getTagByIndexPath:indexPath];
    if (![self currentStatusByIndexPath:indexPath]) {
        [cell setCellBottom:YES];
    }else{
        [cell setCellBottom:NO];
    }
    
    [cell.switchCtrl addTarget:self action:@selector(switchValueChanged:) forControlEvents:UIControlEventValueChanged];
    return cell;
}

- (void)textFieldDidChange:(NSNotification *)notife{
    UITextField *textField = notife.object;
    NSIndexPath *indexPath = [self getIndexPathByTag:textField.tag];
    MESettingList *item = settingArray[indexPath.section];
    Lm *im = item.lm[indexPath.row];
    im.price = textField.text;
    
}
- (NSInteger)getTagByIndexPath:(NSIndexPath *)indexPath{
    NSInteger section = indexPath.section;
    NSInteger row = indexPath.row;
    NSInteger retTag = section * 1000 +row;
    return retTag;
}
- (NSIndexPath *)getIndexPathByTag:(NSInteger)tag{
    NSInteger section = tag/1000;
    NSInteger row = tag%1000;
    
    NSIndexPath * indexPath = [NSIndexPath indexPathForRow:row inSection:section];
    return indexPath;
}

- (BOOL)currentStatusByIndexPath:(NSIndexPath *)indexPath{
    NSInteger secton = indexPath.section;
    NSInteger row = indexPath.row;
    
    MESettingList *item = settingArray[secton];
    Lm * info = item.lm[row];
    
    if ([info.type isEqualToString:@"close"]) {
        return NO;
        
    }else if (info.mid.length > 0 || [info.type isEqualToString:@"open"]) {
        return YES;
        
    }
    return NO;

}

- (void)getSectionSwitchStatus:(NSInteger)section{
    MESettingList *item = settingArray[section];
    item.on = YES;

    for (Lm * lm in item.lm) {
        if ([lm.type isEqualToString:@"close"]) {
            item.on = NO;
            break;
        }
    }
}
- (void)sectionSwitchValueChanged:(UISwitch *)sender{
    
    MESettingList *item = settingArray[sender.tag];
    
    if (sender.on) {
        for (Lm * lm in item.lm) {
            lm.type = @"open";
        }
    }else{
        for (Lm * lm in item.lm) {
            lm.type = @"close";
        }

    }

    item.on = sender.on;
    [self.tableView reloadData];

}
- (void)switchValueChanged:(UISwitch *)sender{
    NSIndexPath *indexPath = [self getIndexPathByTag:sender.tag];
    NSInteger secton = indexPath.section;
    NSInteger row = indexPath.row;
    
    MESettingList *item = settingArray[secton];
    Lm * lm = item.lm[row];
    if (sender.on) {
        lm.type = @"open";
    }else{
        lm.type = @"close";
    }
    [self getSectionSwitchStatus:secton];
    
    [self.tableView reloadData];
}
@end
