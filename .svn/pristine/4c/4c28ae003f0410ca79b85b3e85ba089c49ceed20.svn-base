
//
//  ABBCalendarView.m
//  ABBMockup
//
//  Created by Ive on 10/16/13.
//  Copyright (c) 2013 com.bbtree. All rights reserved.
//

#import <CoreGraphics/CoreGraphics.h>
#import <QuartzCore/QuartzCore.h>
#include <math.h>
#import "ABBCalendarView.h"

#define BUTTON_MARGIN            0
#define CALENDAR_MARGIN          5
#define TOP_HEIGHT               30
#define DAYS_HEADER_HEIGHT       22
#define DEFAULT_CELL_WIDTH       50
#define DEFAULT_CELL_Height      52
#define CELL_BORDER_WIDTH        0
#define CELL_MARK_RADIUS         2
#define DOT_CENTER_X             DEFAULT_CELL_WIDTH / 2
#define DOT_CENTER_Y             DEFAULT_CELL_WIDTH * 2 / 3
#define DATEBUTTON_TAG_WEEKEND   99
#define DATEBUTTON_TAG_HOLIDAY   98

#define DATEBUTTON_FONT          [UIFont fontWithName:@"TeluguSangamMN" size:19.0f]


#define UIColorFromRGB(rgbValue) [UIColor colorWithRed: ((float)((rgbValue & 0xFF0000) >> 16)) / 255.0 green: ((float)((rgbValue & 0xFF00) >> 8)) / 255.0 blue: ((float)(rgbValue & 0xFF)) / 255.0 alpha: 1.0]
#define DATEBUTTON_WEEKEND_COLOR [UIColor lightGrayColor]
#define DATEBUTTON_HOLIDAY_COLOR [UIColor lightGrayColor]

@class CALayer;
@class CAGradientLayer;

@interface GradientView : UIView

@property (nonatomic, strong, readonly) CAGradientLayer *gradientLayer;
- (void)setColors:(NSArray *)colors;

@end

@implementation GradientView

- (id)init
{
    return [self initWithFrame:CGRectZero];
}

+ (Class)layerClass
{
    return [CAGradientLayer class];
}

- (CAGradientLayer *)gradientLayer
{
    return (CAGradientLayer *)self.layer;
}

- (void)setColors:(NSArray *)colors
{
    NSMutableArray *cgColors = [NSMutableArray array];

    for (UIColor *color in colors) {
        [cgColors addObject:(__bridge id)color.CGColor];
    }

    self.gradientLayer.colors = cgColors;
}

@end


@interface DateButton : UIButton
@property (nonatomic, strong) NSDate *date;

@property (nonatomic, strong) CAShapeLayer *circle;

@property (nonatomic) int hour;

@end

@implementation DateButton

@synthesize date   = _date;
@synthesize circle = _circle;
@synthesize hour   = _hour;

- (void)setDate:(NSDate *)aDate
{
    _date = aDate;
    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
    dateFormatter.dateFormat = @"d";
    [self setTitle:[dateFormatter stringFromDate:_date] forState:UIControlStateNormal];
    self.layer.borderColor = [UIColor lightGrayColor].CGColor;
    self.layer.cornerRadius = 3;
    self.layer.borderWidth = 1.0f;

    self.titleLabel.textAlignment = NSTextAlignmentCenter;
}

@end


@interface ABBCalendarView ()

@property (nonatomic, strong) UILabel *titleLabel;
@property (nonatomic, strong) UIButton *prevButton;
@property (nonatomic, strong) UIButton *nextButton;
@property (nonatomic, strong) UIView *calendarContainer;
@property (nonatomic, strong) GradientView *daysHeader;
@property (nonatomic, strong) NSArray *dayOfWeekLabels;
@property (nonatomic, strong) NSMutableArray *dateButtons;

@property (nonatomic) startDay calendarStartDay;
@property (nonatomic, strong) NSDate *monthShowing;
@property (nonatomic, strong) NSCalendar *calendar;
@property (nonatomic, assign) CGFloat cellWidth;


@end

@implementation ABBCalendarView

@synthesize titleLabel = _titleLabel;
@synthesize prevButton = _prevButton;
@synthesize nextButton = _nextButton;
@synthesize calendarContainer = _calendarContainer;
@synthesize daysHeader = _daysHeader;
@synthesize dayOfWeekLabels = _dayOfWeekLabels;
@synthesize dateButtons = _dateButtons;

@synthesize monthShowing = _monthShowing;
@synthesize calendar = _calendar;

@synthesize selectedDate = _selectedDate;
@synthesize selectedBtn;
@synthesize delegate = _delegate;

@synthesize selectedDateTextColor = _selectedDateTextColor;
@synthesize selectedDateBackgroundColor = _selectedDateBackgroundColor;
@synthesize currentDateTextColor = _currentDateTextColor;
@synthesize currentDateBackgroundColor = _currentDateBackgroundColor;
@synthesize selectedBorderColor = _selectedBorderColor;
@synthesize cellWidth = _cellWidth;
//@synthesize dateInput;

@synthesize calendarStartDay;
//@synthesize datePicker,actionSheet;

- (id)init
{
    return [self initWithStartDay:startSunday];
}

- (id)initWithStartDay:(startDay)firstDay
{
    self.calendarStartDay = firstDay;
    return [self initWithFrame:CGRectMake(0, 0, 320, 320)];
}

- (id)initWithStartDay:(startDay)firstDay frame:(CGRect)frame
{
    self.calendarStartDay = firstDay;
    return [self initWithFrame:frame];
}

- (id)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];

    if (self) {
        self.calendar = [[NSCalendar alloc] initWithCalendarIdentifier:NSGregorianCalendar];
        [self.calendar setLocale:[NSLocale localeWithLocaleIdentifier:NSLocalizedString(@"zh_Hans", nil)]];
        [self.calendar setFirstWeekday:self.calendarStartDay];
        self.cellWidth = DEFAULT_CELL_WIDTH;

        self.layer.cornerRadius = 6.0f;
        self.layer.shadowOffset = CGSizeMake(2, 2);
        self.layer.shadowRadius = 2.0f;
        self.layer.shadowOpacity = 0.4f;
        self.layer.borderColor = [UIColor whiteColor].CGColor;
        self.layer.borderWidth = 0.0f;

        // SET UP THE HEADER
        UILabel *titleLabel = [[UILabel alloc] initWithFrame:CGRectZero];
        titleLabel.textAlignment = NSTextAlignmentCenter;
        titleLabel.backgroundColor = [UIColor clearColor];
        titleLabel.autoresizingMask = UIViewAutoresizingFlexibleBottomMargin | UIViewAutoresizingFlexibleWidth;
        [self addSubview:titleLabel];
        self.titleLabel = titleLabel;
        self.titleLabel.userInteractionEnabled = YES;
//        UITapGestureRecognizer *tapGesture =
//            [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(labelTap:)];
//        [self.titleLabel addGestureRecognizer:tapGesture];

        UIButton *prevButton = [UIButton buttonWithType:UIButtonTypeCustom];
        [prevButton setImage:[UIImage imageNamed:@"箭头左"] forState:UIControlStateNormal];
        prevButton.autoresizingMask = UIViewAutoresizingFlexibleBottomMargin | UIViewAutoresizingFlexibleRightMargin;
        [prevButton addTarget:self action:@selector(moveCalendarToPreviousMonth) forControlEvents:UIControlEventTouchUpInside];
        [self addSubview:prevButton];
        self.prevButton = prevButton;

        UIButton *nextButton = [UIButton buttonWithType:UIButtonTypeCustom];
        [nextButton setImage:[UIImage imageNamed:@"箭头右"] forState:UIControlStateNormal];
        nextButton.autoresizingMask = UIViewAutoresizingFlexibleBottomMargin | UIViewAutoresizingFlexibleLeftMargin;
        [nextButton addTarget:self action:@selector(moveCalendarToNextMonth) forControlEvents:UIControlEventTouchUpInside];
        [self addSubview:nextButton];
        self.nextButton = nextButton;

        // THE CALENDAR ITSELF
        UIView *calendarContainer = [[UIView alloc] initWithFrame:CGRectZero];
        calendarContainer.layer.borderWidth = 0.0f;
        calendarContainer.layer.borderColor = [UIColor whiteColor].CGColor;
        calendarContainer.autoresizingMask = UIViewAutoresizingFlexibleTopMargin | UIViewAutoresizingFlexibleWidth;
        //calendarContainer.layer.cornerRadius = 4.0f;
        calendarContainer.clipsToBounds = YES;
        [self addSubview:calendarContainer];
        self.calendarContainer = calendarContainer;
        GradientView *daysHeader = [[GradientView alloc] initWithFrame:CGRectZero];
        daysHeader.autoresizingMask = UIViewAutoresizingFlexibleBottomMargin | UIViewAutoresizingFlexibleWidth;
        [self.calendarContainer addSubview:daysHeader];
        self.daysHeader = daysHeader;
        NSMutableArray *labels = [NSMutableArray array];

        for (NSString *day in [self getDaysOfTheWeek]) {
            UILabel *dayOfWeekLabel = [[UILabel alloc] initWithFrame:CGRectZero];
            dayOfWeekLabel.text = day;
            dayOfWeekLabel.textAlignment = NSTextAlignmentCenter;
            dayOfWeekLabel.backgroundColor = [UIColor clearColor];
            dayOfWeekLabel.shadowColor = [UIColor whiteColor];
            dayOfWeekLabel.shadowOffset = CGSizeMake(0, 1);
            [labels addObject:dayOfWeekLabel];
            [self.calendarContainer addSubview:dayOfWeekLabel];
        }

        self.dayOfWeekLabels = labels;
        // at most we'll need 42 buttons, so let's just bite the bullet and make them now...
        NSMutableArray *dateButtons = [NSMutableArray array];

        for (int i = 0; i < 43; i++) {
            DateButton *dateButton = [DateButton buttonWithType:UIButtonTypeCustom];
            [dateButton setTitle:[NSString stringWithFormat:@"%d", i] forState:UIControlStateNormal];
            [dateButton setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
            [dateButton setTitleColor:[UIColor lightGrayColor] forState:UIControlStateDisabled];
            [dateButton addTarget:self action:@selector(dateButtonPressed:) forControlEvents:UIControlEventTouchUpInside];
            dateButton.circle = [CAShapeLayer layer];
            [dateButtons addObject:dateButton];
        }

        self.dateButtons = dateButtons;

        // initialize the thing
        self.monthShowing = [NSDate date];
        [self setDefaultStyle];
    }

    [self layoutSubviews]; // TODO: this is a hack to get the first month to show properly
    return self;
}

- (void)datepicker:(UIDatePicker *)datePicker didSelectedDate:(NSDate *)aDate
{
    [self removeAllDateMark];
    [self setMonthShowing:aDate];
    [self.delegate calendar:self didMoveToMonth:self.monthShowing];
    [self setSelectedDateAndButton:aDate];
}

- (void)setSelectedDateAndButton:(NSDate *)selectedDate
{
    self.selectedDate = selectedDate;
    NSDateComponents *components = [[NSCalendar currentCalendar] components:NSCalendarUnitDay | NSCalendarUnitMonth | NSCalendarUnitYear fromDate:selectedDate];
    self.selectedBtn = [self.dateButtons objectAtIndex:[components day] - 1];
//    [self.selectedBtn setTag:100];
    [self performSelector:@selector(dateButtonAutoPressed:) withObject:self.selectedBtn afterDelay:0.1];
}

- (void)layoutSubviews
{
    [super layoutSubviews];
    CGFloat containerWidth = self.bounds.size.width - (CALENDAR_MARGIN * 2);
    self.cellWidth = (containerWidth / 7.0) - CELL_BORDER_WIDTH;
    CGFloat containerHeight = ([self numberOfWeeksInMonthContainingDate:self.monthShowing] * (self.cellWidth + CELL_BORDER_WIDTH) + DAYS_HEADER_HEIGHT);
    CGRect newFrame = self.frame;
    newFrame.size.height = containerHeight + CALENDAR_MARGIN + TOP_HEIGHT;
    self.frame = newFrame;
    self.titleLabel.frame = CGRectMake(0, 0, self.bounds.size.width, TOP_HEIGHT);
    self.prevButton.frame = CGRectMake(BUTTON_MARGIN, BUTTON_MARGIN, 48, TOP_HEIGHT);
    self.nextButton.frame = CGRectMake(self.bounds.size.width - 48 - BUTTON_MARGIN, BUTTON_MARGIN, 48, TOP_HEIGHT);
    
    self.calendarContainer.frame = CGRectMake(CALENDAR_MARGIN, CGRectGetMaxY(self.titleLabel.frame), containerWidth, containerHeight);
    self.daysHeader.frame = CGRectMake(0, 0, self.calendarContainer.frame.size.width, DAYS_HEADER_HEIGHT);

    CGRect lastDayFrame = CGRectZero;

    //此处设置label位置
    for (UILabel *dayLabel in self.dayOfWeekLabels) {
        dayLabel.frame = CGRectMake(CGRectGetMaxX(lastDayFrame) + CELL_BORDER_WIDTH, lastDayFrame.origin.y, self.cellWidth, self.daysHeader.frame.size.height);
        lastDayFrame = dayLabel.frame;
    }

    for (DateButton *dateButton in self.dateButtons) {
        [dateButton removeFromSuperview];
    }

    NSDate *date = [self firstDayOfMonthContainingDate:self.monthShowing];
    uint dateButtonPosition = 0;

    while ([self dateIsInMonthShowing:date]) {
        DateButton *dateButton = [self.dateButtons objectAtIndex:dateButtonPosition];

        dateButton.date = date;

        if ([dateButton.date isEqualToDate:self.selectedDate]) {
            dateButton.backgroundColor = self.selectedDateBackgroundColor;
            [dateButton setTitleColor:self.selectedDateTextColor forState:UIControlStateNormal];
            dateButton.layer.borderColor = _selectedBorderColor.CGColor;
        } else if (dateButton.tag == DATEBUTTON_TAG_HOLIDAY) {
            [dateButton setTitleColor:DATEBUTTON_HOLIDAY_COLOR forState:UIControlStateNormal];
        } else if (dateButton.tag == DATEBUTTON_TAG_WEEKEND) {
            [dateButton setTitleColor:DATEBUTTON_WEEKEND_COLOR forState:UIControlStateNormal];
        } else {
            dateButton.backgroundColor = [self dateBackgroundColor];
            [dateButton setTitleColor:[self dateTextColor] forState:UIControlStateNormal];
//            dateButton.layer.borderColor = [UIColor whiteColor].CGColor;
        }

        if ([self dateIsToday:dateButton.date]) {
            [dateButton setTitleColor:self.currentDateTextColor forState:UIControlStateNormal];
            [dateButton setTitleColor:self.currentDateTextColor forState:UIControlStateDisabled];
            dateButton.backgroundColor = self.currentDateBackgroundColor;
            [dateButton.titleLabel setFont:[UIFont fontWithName:@"TeluguSangamMN-Bold" size:19.0f]];
        }

        dateButton.frame = [self calculateDayCellFrame:date];
        [self.calendarContainer addSubview:dateButton];
        date = [self nextDay:date];
        dateButtonPosition++;
    }
}

- (void)setMonthShowing:(NSDate *)aMonthShowing
{
    _monthShowing = aMonthShowing;
    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
    dateFormatter.locale = self.calendar.locale;
    dateFormatter.dateFormat = NSLocalizedString(@"YYYY-MM", nil);
    self.titleLabel.text = [dateFormatter stringFromDate:aMonthShowing];
    [self setNeedsLayout];
}

- (void)setDefaultStyle
{
    self.backgroundColor = UIColorFromRGB(0xF2F2F2);

    [self setTitleColor:[UIColor darkGrayColor]];
    [self setTitleFont:[UIFont fontWithName:@"STHeitiTC-Light" size:17]];

    [self setDayOfWeekFont:[UIFont fontWithName:@"STHeitiTC-Light" size:12]];
    [self setDayOfWeekTextColor:[UIColor darkGrayColor]];
    [self setDayOfWeekBottomColor:UIColorFromRGB(0xF2F2F2) topColor:UIColorFromRGB(0xF2F2F2)];

//    [self setDateFont:[UIFont fontWithName:@"STHeitiTC-Light" size:17.0f]];
    [self setDateFont:DATEBUTTON_FONT];
    [self setDateTextColor:[UIColor darkGrayColor]];//UIColorFromRGB(0x393B40)
    [self setDateBackgroundColor:[UIColor whiteColor]];
    [self setCalendarContainerBackgroundColor:UIColorFromRGB(0xFFFFFF)];

    [self setSelectedDateTextColor:[UIColor redColor]];
    [self setSelectedDateBackgroundColor:[UIColor whiteColor]];
    
    [self setSelectedBorderColor:[UIColor redColor]];
    
    [self setCurrentDateTextColor:[UIColor purpleColor]];//UIColorFromRGB(0xFF3B30)
    [self setCurrentDateBackgroundColor:[UIColor whiteColor]];
}

- (CGRect)calculateDayCellFrame:(NSDate *)date
{
    int row = [self weekNumberInMonthForDate:date] - 1;
    int placeInWeek = (([self dayOfWeekForDate:date] - 1) - self.calendar.firstWeekday + 8) % 7;

    //height
    //float cellHeight = 25;
    return CGRectMake(placeInWeek * (self.cellWidth + CELL_BORDER_WIDTH), (row * (self.cellWidth + CELL_BORDER_WIDTH)) + CGRectGetMaxY(self.daysHeader.frame) + CELL_BORDER_WIDTH, self.cellWidth, self.cellWidth);
}

- (void)moveCalendarToNextMonth
{
    [self removeAllDateMark];
    NSDateComponents *comps = [[NSDateComponents alloc]init];
    [comps setMonth:1];
    self.monthShowing = [self.calendar dateByAddingComponents:comps toDate:self.monthShowing options:0];
    [self.delegate calendar:self didMoveToMonth:self.monthShowing];
}

- (void)moveCalendarToPreviousMonth
{
    [self removeAllDateMark];
    NSDateComponents *comps = [[NSDateComponents alloc]init];
    [comps setMonth:-1];
    self.monthShowing = [self.calendar dateByAddingComponents:comps toDate:self.monthShowing options:0];
    [self.delegate calendar:self didMoveToMonth:self.monthShowing];
}

- (void)dateButtonAutoPressed:(id)sender
{
    DateButton *dateButton = sender;

    if (dateButton.hour == 0) {
        [self setTag:100];
    }

    [self dateButtonPressed:dateButton];
}

- (void)dateButtonPressed:(id)sender
{
    DateButton *dateButton = sender;

    self.selectedDate = dateButton.date;

//    if (dateButton.hour == 0) {
//        [self.delegate calendar:self didSelectDateWithNoValue:self.selectedDate];
//    } else
    {
        [self.delegate calendar:self didSelectDate:self.selectedDate];
    }

    if (self.selectedBtn != dateButton) {
        [self dotShink:self.selectedBtn];
    }

    self.selectedBtn = dateButton;
    [self dotEnlarge:dateButton];
    [self setNeedsLayout];
}

#pragma mark - Time sheet bussiness logic

- (void)setDateButtonHoliday:(NSDate *)date
{
    NSDateComponents *components = [[NSCalendar currentCalendar] components:NSCalendarUnitDay | NSCalendarUnitMonth | NSCalendarUnitYear fromDate:date];

    DateButton *dateButton = [self.dateButtons objectAtIndex:[components day] - 1];

    [dateButton setTitleColor:DATEBUTTON_HOLIDAY_COLOR forState:UIControlStateNormal];
    [dateButton setTag:DATEBUTTON_TAG_HOLIDAY];
    [dateButton setNeedsDisplay];
}

- (void)setDateButtonWeekend:(NSDate *)date
{
    NSDateComponents *components = [[NSCalendar currentCalendar] components:NSCalendarUnitDay | NSCalendarUnitMonth | NSCalendarUnitYear fromDate:date];
    DateButton *dateButton = [self.dateButtons objectAtIndex:[components day] - 1];

    [dateButton setTitleColor:DATEBUTTON_WEEKEND_COLOR forState:UIControlStateNormal];
    [dateButton setTag:DATEBUTTON_TAG_WEEKEND];
    [dateButton setNeedsDisplay];
}

- (void)setDateButtonUnable:(NSDate *)date
{
    NSDateComponents *components = [[NSCalendar currentCalendar] components:NSCalendarUnitDay | NSCalendarUnitMonth | NSCalendarUnitYear fromDate:date];
    DateButton *dateButton = [self.dateButtons objectAtIndex:[components day] - 1];

    [dateButton setEnabled:NO];
}

- (void)markDayButtonByDate:(NSDate *)date withColorDot:(UIColor *)color hours:(float)hour
{
    NSDateComponents *components = [[NSCalendar currentCalendar] components:NSCalendarUnitDay | NSCalendarUnitMonth | NSCalendarUnitYear fromDate:date];
    DateButton *dateButton = [self.dateButtons objectAtIndex:[components day] - 1];

    [self markDayButton:dateButton withColorDot:color];
    dateButton.hour = hour;
}

- (void)markDayButton:(DateButton *)dateButton withColorDot:(UIColor *)color
{
    //--draw circle begin---
    // Set up the shape of the circle
    int radius = CELL_MARK_RADIUS;
    CGFloat pointX = self.cellWidth*3/4;
//    CGPoint drawPoint = CGPointMake(DOT_CENTER_X, DOT_CENTER_Y);
    CGPoint drawPoint = CGPointMake(pointX, pointX);

    // Make a circular shape
    dateButton.circle.path = [UIBezierPath bezierPathWithArcCenter:CGPointZero radius:radius startAngle:0 endAngle:M_PI * 2 clockwise:NO].CGPath;
    dateButton.circle.position = drawPoint;

    // Configure the apperence of the circle
    UIColor *pointColor;
    pointColor = color;

    dateButton.circle.fillColor = pointColor.CGColor;
    dateButton.circle.strokeColor = pointColor.CGColor;
    dateButton.circle.lineWidth = 1;
    // Add to parent layer

    [dateButton.layer insertSublayer:dateButton.circle atIndex:0];
    //--draw circle end----

    // Configure animation
/*
    CABasicAnimation *pathAnimation = [CABasicAnimation animationWithKeyPath:@"transform.scale"];
    // Set the initial and the final values
    [pathAnimation setFromValue:[NSNumber numberWithFloat:0.1f]];
    [pathAnimation setToValue:[NSNumber numberWithFloat:1.0f]];
    [pathAnimation setDuration:1.0f];
    [pathAnimation setRepeatCount:1.0f];
    [pathAnimation setTimingFunction:[CAMediaTimingFunction functionWithControlPoints:.34:.01:.69:1.37]];
    [dateButton.circle addAnimation:pathAnimation forKey:@"changePathAnimation"];
*/
    if (dateButton == self.selectedBtn) {
        [self dotEnlarge:dateButton];
//        [dateButton setTag:100];
        [self performSelector:@selector(dateButtonAutoPressed:) withObject:dateButton afterDelay:0.1];
    }
}

- (void)dotEnlarge:(DateButton *)sender
{
    if (sender.circle == nil) {
        return;
    }

    if (sender.circle.fillColor == CALENDAR_DATE_COLOR_0.CGColor) {
        sender.circle.fillColor = CALENDAR_DATE_COLOR_0_bg.CGColor;
        sender.circle.strokeColor = CALENDAR_DATE_COLOR_0_bg.CGColor;
    }

    [sender.titleLabel setFont:[UIFont fontWithName:@"TeluguSangamMN-Bold" size:19.0f]];
/*
    CABasicAnimation *positionPosition = [CABasicAnimation animationWithKeyPath:@"position"];
    // Set the initial and the final values

    CGPoint newPosition = CGPointMake(sender.frame.size.width / 2 - 1, sender.frame.size.height / 2 - 3);
    [positionPosition setFromValue:[NSValue valueWithCGPoint:sender.circle.position]];
    sender.circle.position = newPosition;
    [positionPosition setToValue:[NSValue valueWithCGPoint:newPosition]];
    [positionPosition setDuration:0.4f];
    [positionPosition setRepeatCount:1.0f];
    [positionPosition setTimingFunction:[CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionLinear]];

    CABasicAnimation *pathAnimation = [CABasicAnimation animationWithKeyPath:@"transform.scale"];

    // Set the initial and the final values
    [pathAnimation setFromValue:[NSNumber numberWithFloat:1.0f]];
    CGAffineTransform transform =  CGAffineTransformMakeScale(6, 6);
    sender.circle.affineTransform = transform;
    [pathAnimation setToValue:[NSNumber numberWithFloat:6.0f]];
    [pathAnimation setDuration:0.7f];
    [pathAnimation setRepeatCount:1.0f];
    [pathAnimation setTimingFunction:[CAMediaTimingFunction functionWithControlPoints:.34:.01:0.69:1.37]];
    [sender.circle addAnimation:positionPosition forKey:@"changePathAnimation"];
    [sender.circle addAnimation:pathAnimation forKey:@"pathAnimation"];
 */
}

- (void)dotShink:(DateButton *)sender
{
    if (sender.circle == nil) {
        return;
    }

    if (sender.circle.fillColor ==  CALENDAR_DATE_COLOR_0_bg.CGColor) {
        sender.circle.fillColor = CALENDAR_DATE_COLOR_0.CGColor;
        sender.circle.strokeColor = CALENDAR_DATE_COLOR_0.CGColor;
    }

    [sender.titleLabel setFont:DATEBUTTON_FONT];
    /*
    CABasicAnimation *positionPosition = [CABasicAnimation animationWithKeyPath:@"position"];
    // Set the initial and the final values
    CGPoint newPosition = CGPointMake(DOT_CENTER_X, DOT_CENTER_Y);
    [positionPosition setFromValue:[NSValue valueWithCGPoint:sender.circle.position]];
    sender.circle.position = newPosition;
    [positionPosition setToValue:[NSValue valueWithCGPoint:newPosition]];
    [positionPosition setDuration:0.3f];
    [positionPosition setRepeatCount:1.0f];
    [positionPosition setTimingFunction:[CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionLinear]];

    CABasicAnimation *pathAnimation = [CABasicAnimation animationWithKeyPath:@"transform.scale"];

    // Set the initial and the final values
    [pathAnimation setFromValue:[NSNumber numberWithFloat:5.0f]];
    CGAffineTransform transform =  CGAffineTransformMakeScale(1, 1);
    sender.circle.affineTransform = transform;
    [pathAnimation setToValue:[NSNumber numberWithFloat:1.0f]];
    [pathAnimation setDuration:0.5f];
    [pathAnimation setRepeatCount:1.0f];
    [pathAnimation setTimingFunction:[CAMediaTimingFunction functionWithControlPoints:.34:.01:0.69:1.37]];
    [sender.circle addAnimation:positionPosition forKey:@"changePathAnimation"];
    [sender.circle addAnimation:pathAnimation forKey:@"pathAnimation"];
    */
}

- (void)removeAllDateMark
{
    for (DateButton *dateButton in self.dateButtons) {
        [dateButton setEnabled:YES];
//    [dateButton setTitleColor:[UIColor lightGrayColor] forState:UIControlStateDisabled];
        [dateButton.circle removeFromSuperlayer];
        dateButton.hour = 0;
        [dateButton setTag:0];
        [dateButton.titleLabel setFont:DATEBUTTON_FONT];
    }
}

#pragma mark - Theming getters/setters

- (void)setTitleFont:(UIFont *)font
{
    self.titleLabel.font = font;
}

- (UIFont *)titleFont
{
    return self.titleLabel.font;
}

- (void)setTitleColor:(UIColor *)color
{
    self.titleLabel.textColor = color;
}

- (UIColor *)titleColor
{
    return self.titleLabel.textColor;
}

- (void)setButtonColor:(UIColor *)color
{
    [self.prevButton setImage:[ABBCalendarView imageNamed:@"箭头左" withColor:color] forState:UIControlStateNormal];
    [self.nextButton setImage:[ABBCalendarView imageNamed:@"箭头右" withColor:color] forState:UIControlStateNormal];
}

- (void)setInnerBorderColor:(UIColor *)color
{
    self.calendarContainer.layer.borderColor = color.CGColor;
}

- (void)setDayOfWeekFont:(UIFont *)font
{
    for (UILabel *label in self.dayOfWeekLabels) {
        label.font = font;
    }
}

- (UIFont *)dayOfWeekFont
{
    return (self.dayOfWeekLabels.count > 0) ? ((UILabel *)[self.dayOfWeekLabels lastObject]).font : nil;
}

- (void)setDayOfWeekTextColor:(UIColor *)color
{
    for (UILabel *label in self.dayOfWeekLabels) {
        label.textColor = color;
    }
}

- (UIColor *)dayOfWeekTextColor
{
    return (self.dayOfWeekLabels.count > 0) ? ((UILabel *)[self.dayOfWeekLabels lastObject]).textColor : nil;
}

- (void)setDayOfWeekBottomColor:(UIColor *)bottomColor topColor:(UIColor *)topColor
{
    [self.daysHeader setColors:[NSArray arrayWithObjects:topColor, bottomColor, nil]];
}

- (void)setDateFont:(UIFont *)font
{
    for (DateButton *dateButton in self.dateButtons) {
        dateButton.titleLabel.font = font;
    }
}

- (UIFont *)dateFont
{
    return (self.dateButtons.count > 0) ? ((DateButton *)[self.dateButtons lastObject]).titleLabel.font : nil;
}

- (void)setDateTextColor:(UIColor *)color
{
    for (DateButton *dateButton in self.dateButtons) {
        [dateButton setTitleColor:color forState:UIControlStateNormal];
    }
}

- (UIColor *)dateTextColor
{
    return (self.dateButtons.count > 0) ? [((DateButton *)[self.dateButtons lastObject]) titleColorForState:UIControlStateNormal] : nil;
}

- (void)setDateBackgroundColor:(UIColor *)color
{
    for (DateButton *dateButton in self.dateButtons) {
        dateButton.backgroundColor = color;
    }
}

- (UIColor *)dateBackgroundColor
{
    return (self.dateButtons.count > 0) ? ((DateButton *)[self.dateButtons lastObject]).backgroundColor : nil;
}

- (void)setDateBorderColor:(UIColor *)color
{
    self.calendarContainer.backgroundColor = color;
}

- (void)setCalendarContainerBackgroundColor:(UIColor *)color
{
    self.calendarContainer.backgroundColor = color;
}

//Border color
- (UIColor *)dateBorderColor
{
    return self.calendarContainer.backgroundColor;
}

#pragma mark - Calendar helpers

- (NSDate *)firstDayOfMonthContainingDate:(NSDate *)date
{
    NSDateComponents *comps = [self.calendar components:(NSYearCalendarUnit | NSMonthCalendarUnit | NSDayCalendarUnit) fromDate:date];

    [comps setDay:1];
    return [self.calendar dateFromComponents:comps];
}

- (NSArray *)getDaysOfTheWeek
{
    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];

    dateFormatter.locale = self.calendar.locale;
    // adjust array depending on which weekday should be first
    NSArray *weekdays = [dateFormatter shortWeekdaySymbols];
    NSUInteger firstWeekdayIndex = [self.calendar firstWeekday] - 1;

    if (firstWeekdayIndex > 0) {
        weekdays = [[weekdays subarrayWithRange:NSMakeRange(firstWeekdayIndex, 7 - firstWeekdayIndex)]
                    arrayByAddingObjectsFromArray:[weekdays subarrayWithRange:NSMakeRange(0, firstWeekdayIndex)]];
    }

    return weekdays;
}

- (int)dayOfWeekForDate:(NSDate *)date
{
    NSDateComponents *comps = [self.calendar components:NSWeekdayCalendarUnit fromDate:date];

    return (int)comps.weekday;
}

- (BOOL)dateIsToday:(NSDate *)date
{
    NSDateComponents *otherDay = [self.calendar components:NSEraCalendarUnit | NSYearCalendarUnit | NSMonthCalendarUnit | NSDayCalendarUnit fromDate:date];
    NSDateComponents *today = [self.calendar components:NSEraCalendarUnit | NSYearCalendarUnit | NSMonthCalendarUnit | NSDayCalendarUnit fromDate:[NSDate date]];

    return ([today day] == [otherDay day] &&
            [today month] == [otherDay month] &&
            [today year] == [otherDay year] &&
            [today era] == [otherDay era]);
}

- (int)weekNumberInMonthForDate:(NSDate *)date
{
    NSDateComponents *comps = [self.calendar components:(NSWeekOfMonthCalendarUnit) fromDate:date];

    return (int)comps.weekOfMonth;
}

- (int)numberOfWeeksInMonthContainingDate:(NSDate *)date
{
    return (int)[self.calendar rangeOfUnit:NSWeekCalendarUnit inUnit:NSMonthCalendarUnit forDate:date].length;
}

- (BOOL)dateIsInMonthShowing:(NSDate *)date
{
    NSDateComponents *comps1 = [self.calendar components:(NSMonthCalendarUnit) fromDate:self.monthShowing];
    NSDateComponents *comps2 = [self.calendar components:(NSMonthCalendarUnit) fromDate:date];

    return comps1.month == comps2.month;
}

- (NSDate *)nextDay:(NSDate *)date
{
    NSDateComponents *comps = [[NSDateComponents alloc] init];

    [comps setDay:1];
    return [self.calendar dateByAddingComponents:comps toDate:date options:0];
}

+ (UIImage *)imageNamed:(NSString *)name withColor:(UIColor *)color
{
    UIImage *img = [UIImage imageNamed:name];

    UIGraphicsBeginImageContext(img.size);
    CGContextRef context = UIGraphicsGetCurrentContext();
    [color setFill];

    CGContextTranslateCTM(context, 0, img.size.height);
    CGContextScaleCTM(context, 1.0, -1.0);

    CGContextSetBlendMode(context, kCGBlendModeColorBurn);
    CGRect rect = CGRectMake(0, 0, img.size.width, img.size.height);
    CGContextDrawImage(context, rect, img.CGImage);

    CGContextClipToMask(context, rect, img.CGImage);
    CGContextAddRect(context, rect);
    CGContextDrawPath(context, kCGPathFill);

    UIImage *coloredImg = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return coloredImg;
}

@end
